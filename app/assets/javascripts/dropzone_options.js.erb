var uploader = {

  $dropzoneContainer: null,
  $uploaderContainer: null,
  $previewsContainer: null,

  $instructions: null,
  $controls: null,
  $saveAllBtn: null,
  $removeAllBtn: null,

  removeBtn: null,
  dropzone: null,
  counter: null,
  doneSaving: false,

  uploads: [],
  user: "",
  xhrs: [],

  init: function() {
    var self = this;

    self.$dropzoneContainer = $(".dropzone");
    self.$uploaderContainer = $("#uploader-container");
    self.$previewsContainer = $("#upload-previews");

    self.$instructions = $("#dropzone-upload-text");
    self.$controls = $("#uploader-controls");
    self.$saveAllBtn = $("#save-uploads");
    self.$removeAllBtn = $("#remove-all-uploads");

    self.user = $("#uploader-container").data("userid");

    self.counter = 0;

    self.dropzone = new Dropzone(".dropzone", {
      maxFilesize: 50, // Set the maximum file size to 50 MB
      maxThumbnailFilesize: 50,
      paramName: "file", // Rails expects the file upload to be something like model[field_name]
      addRemoveLinks: false, // Don't show remove links on dropzone itself.
      acceptedFiles: 'image/*',
      dictDefaultMessage: "Drag Images or Click Here to Upload",
      clickable: "#clickable",
      thumbnailHeight: 210,
      thumbnailWidth: null,
      previewTemplate: document.querySelector('#preview-template').innerHTML,
      previewsContainer: "#upload-previews"
    });

    $("#clickable").on("click", function(e) {
      e.preventDefault();
    })

    self.bindHandlers();
  },

  bindHandlers: function() {
    var self = this;

    self.dropzone.on("addedfile", function(file) {
      self.showDropzoneUI();
      self.generateUpload(file);
    });

    self.dropzone.on("thumbnail", function(file, dataURL) {
      self.uploads[file.id].thumbImg = dataURL;
    });

    self.dropzone.on("success", function(file, responseText, event){
      self.saveUpload(file, responseText, event);
    });

    self.dropzone.on("removedfile", function(file) {
      delete self.uploads[file.id];
    });

    self.$dropzoneContainer.on("click.save", "#save-uploads", function(){
      self.saveAllUploads();
    });

    self.$dropzoneContainer.on("click.removeAll", "#remove-all-uploads", function() {
      self.removeAllUploads();
    });

    self.dropzone.on("sending", function(file, xhr, formData) {
    // Will send the content type along with the file as POST data.
      formData.append("Content-Type", file.type);
    });

    self.dropzone.on("queuecomplete", function() {

      window.setInterval(function(){

        if (self.uploads.doneSaving === true) {
          self.$saveAllBtn.prop("disabled", false);
        }
      }, 1000);

    });

  },

  showDropzoneUI: function() {
    var self = this;

    self.$previewsContainer.removeClass("flex-container");
    self.$uploaderContainer.removeClass("flex-container");
    self.$instructions.hide();
    self.$controls.show();
    self.$saveAllBtn.prop("disabled", true);
    self.$removeAllBtn.prop("disabled", false);
  },

  generateUpload: function(file) {
    var self = this;

    file.id = self.counter;
    self.counter++;

    self.uploads[file.id] = {
      file: file,
      $preview: $(file.previewElement),
    };

    self.generateRemoveIcon(file);
    self.setTaggingTabIndex(file);

  },

  generateRemoveIcon: function(file) {
    var self = this;

    var removeBtn = Dropzone.createElement("<i class='dz-remove fa fa-minus-circle'></i>");
    file.previewElement.appendChild(removeBtn);

    removeBtn.addEventListener("click", function() {
      self.removeUpload(file, this);
    });
  },

  setTaggingTabIndex: function(file) {
    var self = this;

    var uploadPreview = self.uploads[file.id].$preview;

    uploadPreview.find(".dz-remove").attr("id", file.id);

    var uploadTagField = uploadPreview.find("#upload_tag_list");
    uploadTagField.attr("tabindex", file.id + 1);
    formatTags(uploadTagField);
  },

  bindTaggingUpdate: function(file) {
    var self = this;

    var upload = self.uploads[file.id];

    upload.$preview.on("focusout", function() {
      self.grabTags(file);
      self.putTags(file);
    });
  },

  grabTags: function(file) {
    var self = this;

    var upload = self.uploads[file.id];

    var tags = [];
    var $taglist = upload.$preview.find(".tag-data");

    if ( $taglist.length ) {
      $taglist.each(function(){
        tags.push( $(this).text() );
      });
    }

    upload.tags = tags.join();
    console.log("tags are: ", upload.tags);
  },

  putTags: function(file) {
    var self = this;

    var upload = self.uploads[file.id];
    var loadingGIF = upload.$preview.find(".loading-gif");
    loadingGIF.removeClass("hidden");

    $.ajax({ url: '/uploads/' + upload.databaseID,
      type: 'PUT',
      dataType: "json",
      data: { upload: { tag_list: upload.tags } },
      success: function(){
        loadingGIF.addClass("hidden");
      },
    });
  },

  removeUpload: function(file, removeBtn) {
    console.log("remove");
    var self = this;

    upload = self.uploads[file.id];
    //remove from Dropzone instance
    self.dropzone.removeFile(file);

    //delete model from Database
    self.deleteFile(file, uploadDatabaseID);
  },

  deleteFile: function(file, uploadDatabaseID) {
    var self = this;

    $.ajax({
      url: "/uploads/" + upload.databaseID,
      type: "DELETE",
      dataType: "script",
      success: function(result) {
        console.log("deleted");
      },
    });
  },

  saveUpload: function(file, responseText, event) {
    var self = this;

    var upload = self.uploads[file.id];

    var directURL = $(responseText).find("location")[0];
    var url = $(directURL).text();
    self.$saveAllBtn.prop("disabled", true);
    $("#saving-indicator").removeClass("hidden");
    upload.$preview.find(".overlay").removeClass("hidden");;

    upload.url = url;

    $.ajax({
      url: '/uploads',
      type: 'POST',
      dataType: "json",
      data: { upload: { direct_upload_url: upload.url, dz_thumb: upload.thumbImg } },
      success: function(result) {
        upload.databaseID = result["id"];
        self.uploads.doneSaving = true;
        $("#saving-indicator").addClass("hidden");
        upload.$preview.find(".overlay").addClass("hidden");;
        upload.$preview.find("#dropzone-upload-tags").removeClass("hidden");
        self.bindTaggingUpdate(file);
      },
      error: function(result) {
        alert(result);
      }
    });
  },

  saveAllUploads: function() {
    var self = this;

    $(".overlay").removeClass("hidden");
    window.location.replace("/users/" + self.user);

  },

  removeAllUploads: function() {
    var self = this;

    $(".overlay").find("p").text("deleting images...");
    $(".overlay").removeClass("hidden");
    self.uploads.forEach(function( el, i, arr ){
      var upload = el;

      $.ajax({
        url: "/uploads/" + upload.databaseID,
        type: "DELETE",
        dataType: "script",
        success: function(){
          self.dropzone.removeAllFiles(true);
          $saveAllBtn.prop("disabled", true);
          $removeAllBtn.prop("disabled", true);
          self.uploads = [];
          $(".overlay").addClass("hidden");
        }
      });
    });
  },

};

$('.uploads.new').ready(function () {

  // disable auto discover
  Dropzone.autoDiscover = false;

  uploader.init();

});
